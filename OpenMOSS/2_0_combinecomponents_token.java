/***thisclassreadsanadjacencymatrixfromafileandfindswhatedgesareneededtomakeitstronglyconnected.**@authorzhenchen*@auid6438580**/importjava.util.arraylist;publicclasscombinecomponents{privatestaticint[][]matrix,recommendation,newstreets;privatestaticfinalstringinput_file_name="matrix.txt";privatestaticfinalstringoutput_file_name="newstreets.txt";privatestaticfinalintauid=6438580;publicstaticvoidmain(string[]args){matrix=filehelper.readfile(input_file_name);try{recommendation=combine(matrix);newstreets=preparefile(recommendation);filehelper.writefile(output_file_name,newstreets);}catch(nullpointerexceptione){system.out.println("argumentisnull!");}}publicstaticint[][]combine(int[][]matrix){inti,j,k,n,m,edge;int[]indegree,outdegree,line;int[][]components,recommendation;arraylist<int[]>temp=newarraylist<int[]>();arraylist<integer>source=newarraylist<integer>();arraylist<integer>sink=newarraylist<integer>();components=findcomponents.componentsinmatrix(matrix);n=components.length;if(n>1){//findin-degreeandout-degreeofeachcomponentindegree=newint[n];outdegree=newint[n];for(i=0;i<n;i++){indegree[i]=finddegree(matrix,components,i,true);outdegree[i]=finddegree(matrix,components,i,false);}//findsourcecomponentandsinkcomponentfor(i=0;i<n;i++){if(indegree[i]==0){//thiscomponentisasourcesource.add(components[i][0]);}if(outdegree[i]==0){//thiscomponentisasinksink.add(components[i][0]);}}n=source.size();m=sink.size();edge=math.max(n,m);i=j=0;for(k=0;k<edge;k++){if(source.get(i).equals(sink.get(j))){i=(i+1)%n;}line=newint[2];line[0]=sink.get(j);line[1]=source.get(i);temp.add(line);i=(i+1)%n;j=(j+1)%m;}}n=temp.size();recommendation=newint[n][];for(i=0;i<n;i++){recommendation[i]=temp.get(i);}returnrecommendation;}privatestaticint[][]preparefile(int[][]recommendation){inti,n;n=recommendation.length+1;int[][]newstreets=newint[n][];//addauidtothefirstlinenewstreets[0]=newint[1];newstreets[0][0]=auid;for(i=1;i<n;i++){newstreets[i]=recommendation[i-1];}returnnewstreets;}publicstaticbooleancontains(finalint[]array,finalintvalue){for(finalintelement:array){if(element==value){returntrue;}}returnfalse;}publicstaticintfinddegree(int[][]matrix,int[][]components,intorder,booleanflag){inti,j,n,m,counter;boolean[]white;n=matrix.length;m=components.length;counter=0;white=newboolean[m];for(i=0;i<m;i++){white[i]=false;}white[order]=true;for(finalintvertex:components[order]){for(i=0;i<n;i++){for(j=0;j<m;j++){//verticesinthesamecomponentarethesameif(white[j]==false&&contains(components[j],i)){if(flag==true&&matrix[i][vertex]>0||flag==false&&matrix[vertex][i]>0){counter++;white[j]=true;}}}}}returncounter;}}