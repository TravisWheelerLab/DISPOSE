/***thisclassreadsanadjacencylistfromafileandperformsadepthfirstsearchonit.**@authorzhenchen*@auid6438580**/importjava.util.arraylist;importjava.util.stack;publicclassdfs{privatestaticint[][]list,dfslist;privatestaticfinalstringinput_file_name="list.txt";privatestaticfinalstringoutput_file_name="dfs.txt";publicstaticvoidmain(string[]args){list=filehelper.readfile(input_file_name);try{dfslist=fulldfs(list);filehelper.writefile(output_file_name,dfslist);}catch(nullpointerexceptione){system.out.println("argumentisnull!");}}/***performafulldepthfirstsearchontheinputgraphandgivearesult*list.**@paramlist*anadjacencylist.**@returnadfslistwhichcontainsabunchofarrays.emptyarraysare*usedtoseparatedifferentsearchtrees.otherarrayshavetwo*elements.thefirstelementisthelabelofthevertexassigned*toitduringthesearch.thesecondelementisthevertexnumber.*/publicstaticint[][]fulldfs(int[][]list){inti,n,counter;int[][]dfslist;n=list.length;counter=0;boolean[]white=newboolean[n];arraylist<int[]>temp=newarraylist<int[]>();//colourallverticeswhiteinitiallyfor(i=0;i<n;i++){white[i]=true;}//dowehaveanywhitevertices?for(i=0;i<n;i++){if(white[i]==true){//rundfsoncebasedonthesourcevertexcounter=onedfs(list,white,i,temp,counter);}}n=temp.size();dfslist=newint[n][];for(i=0;i<n;i++){dfslist[i]=temp.get(i);}returndfslist;}/***performasingledepthfirstsearchbasedonthesourcevertex.**@paramlist*anadjacencylist.*@paramwhite*anarraycontainingcolourinformationofeachvertex.*@paramsource*thesourcevertextostartasearch.*@paramtemp*storetheinformationofthissearchtree.*@paramcounter*givealabeltoeachoutputvertexaccordingtoitsorder.**@returntheupdatedcounter.**/publicstaticintonedfs(int[][]list,boolean[]white,intsource,arraylist<int[]>temp,intcounter){inti,father,child;int[]line;stack<integer>dfsstack=newstack<integer>();dfsstack.push(source);white[source]=false;while(!dfsstack.isempty()){father=dfsstack.peek();//trytofindawhitevertexfromthechildrenoffatheri=0;while(i<list[father].length&&white[list[father][i]]==false){i++;}if(i<list[father].length){//addachildvertexintothestackchild=list[father][i];dfsstack.push(child);white[child]=false;}else{//popfathervertexfromthestackdfsstack.pop();line=newint[2];line[0]=counter++;line[1]=father;temp.add(line);}}//stackisemptyandwehavebuiltasearchtreetemp.add(newint[0]);returncounter;}}